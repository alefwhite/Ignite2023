# Info

1: Instalação das bibliotecas inicias para rodar a aplicação
    npm i typescript @types/node tsx tsup -D

2: Criação do arquivo de configuração do typescript
    npx tsc --init

3: Setando algumas configurações no tsconfig
    "target": "es2020"

4: Instalando o framework de servidor fastify
    npm i fastify

5: Script de inicialização da aplicação para desenvolvimento
    "scripts": {
        "start:dev": "tsx watch src/server.ts"
    }

6: Script para gerar o build da aplicação
    "scripts": {
        "build": "tsup src --out-dir build"
    }

7: Script para start a aplicação no ambiente de produção
    "scripts": {
        "start": "node build/server.js",
    }

8: Usando versões exatas do npm
    Devemos criar um arquivo na raiz com o nome de .npmrc
    Depois incluir -> save-exact=true

9: Instalação da biblioteca para trabalharmos com variáveis de ambiente
    npm i dotenv

10: Instalação da biblioteca zod para validação dos dados
    npm i zod

11: Instalação e Configuração do eslint
    npm i eslint @rocketseat/eslint-config -D

12: Criando aliases de importação no arquivo tsconfig
     "baseUrl": "./",
     "paths": {
       "@/*": ["./src/*"]
     },

13: Instalação e configuração do prisma orm de banco de dados
    npm i prisma -D
    npx prisma -h - Lista os comandos do prisma
    npx prisma init - Após a instalação podemos definir nossa primeira model
    npx prisma generate - Cria a tipagem do typescript por baixo dos panos
    npm i @prisma/client - Dependência de produção do prisma para acessar o banco de dados
    npx prisma migrate dev - Executa um schema que ainda não foi executado e cria sua migration


14: Criação do docker-compose para subir o banco de dados postgres
    Na raiz do projeto devemos criar um arquivo chamado docker-compose.yml e colocar a informações abaixo
        version: '3'

        services:
          api-solid-pg:
            image: bitnami/postgresql
            ports:
              - "5432:5432"
            environment:
              - POSTGRESQL_USERNAME=docker
              - POSTGRESQL_PASSWORD=docker
              - POSTGRESQL_DATABASE=apisolid


    docker compose up -d   -> Executa o docker compose
    docker compose stop    -> Para o container sem deletar
    docker compose down    -> Deleta todos os containers

15: Instalação da biblioteca mais utilizada com node para fazer hash de senhas
    npm install bcryptjs
    npm install @types/bcryptjs -D


16: SOLID - 5 principals

    // D - Dependency Inversion Principle



17: Configurando o VITEST
    npm i vitest vite-tsconfig-paths -D

    1.1 - Após a instalação devemos criar um arquivo na raiz chamado vite.config.ts e incluir a config abaixo
        import { defineConfig } from 'vitest/config';
        import tsConfigPaths from 'vite-tsconfig-paths';
        export default defineConfig({
            plugins: [tsConfigPaths()]
        });

    1.2 - Agora em nosso package.json devemos criar o script abaixo
        "test": "vitest run",
        "test:watch": "vitest",
        "test:coverage": "vitest --coverage",

    1.3 - Adicionando UI do vitest
        npm i -D @vitest/ui
        "test:ui": "vitest --ui"

    4.2 - 4 min

18 - TDD & Mocking

    1 - Casos de Uso de usuário, perfil e autenticação começamos primeiro pela implementação dos casos de uso e depois
        realizamos os teste unitários.

    2 - Conforme dito em aula podemos utilizar o TDD para casos de uso que a regra de negócio é mais complexa então
        devemos começar pelos testes e ir implementado os códigos conforme a necessidade

19 - Adicionando a biblioteca dayjs para nos ajudarmos nas validações de data

20 - Princípios da autenticação JWT

     1 - JWT - JSON Web Token

     2 - Usuário faz login, envia e-mail/senha, o back-end cria um token ÚNICO, não-modificável e STATELESS

     3 - Stateless - Não armazenado em nenhuma estrutura de persistência de dados (banco de dados)

     4 - Back-end - Quando vai criar o token ele usa uma PALAVRA-CHAVE (string)

     5 - Palavra-chave: batata

     6 - E-mail/senha -> header.payload.sign

     LOGIN => JWT

     JWT => Todas as requisições dali para frente
     HEADER (Cabeçalho )=> Authorization: Bearer JWT

     Implementando o JWT

     npm i @fastify/jwt

21 - Configurando Test Environment

     1 - Dentro da pasta primas devemos criar uma pasta chamada vitest-environment-prisma

     2 - Depois devemos navegar até ela pelo terminal e dar um npm init -y

     3 - Depois devemos criar um arquivo chamado prisma-test-environment e incluir esse arquivo no main
         do "package.json" "main": "prisma-test-environment.ts" e incluir o código abaixo
         import { Environment } from 'vitest';

         // @ts-ignore
         export default <Environment>{
           name: 'prisma',
           async setup() {
             let count = 0;

             console.log('Executou ' + count++);

             return {
               teardown() {},
             };
           },
         };

     4 - Depois no arquivo vite.config.ts incluir a configuração abaixo
        test: {
            environmentMatchGlobs: [['src/http/controllers/**', 'prisma']],
        }

     5 - Agora devemos navegar pelo terminal até a pasta vitest-environment-prisma e executar npm link
         Isso faz como se fosse um repositório local na máquina

     6 - Agora podemos instalar globalmente vitest-environment-prisma como um pacote da aplicação
         npm link vitest-environment-prisma
         npm run test

         Se apresentar um erro devemos instalar a versão utilizada na aula e excluir a node_modules e instalar novamente
         as dependências

         npm i vitest@0.33.0 -D
