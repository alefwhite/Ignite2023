# Info

1: Instalação das bibliotecas inicias para rodar a aplicação
    npm i typescript @types/node tsx tsup -D

2: Criação do arquivo de configuração do typescript
    npx tsc --init

3: Setando algumas configurações no tsconfig
    "target": "es2020"

4: Instalando o framework de servidor fastify
    npm i fastify

5: Script de inicialização da aplicação para desenvolvimento
    "scripts": {
        "start:dev": "tsx watch src/server.ts"
    }

6: Script para gerar o build da aplicação
    "scripts": {
        "build": "tsup src --out-dir build"
    }

7: Script para start a aplicação no ambiente de produção
    "scripts": {
        "start": "node build/server.js",
    }

8: Usando versões exatas do npm
    Devemos criar um arquivo na raiz com o nome de .npmrc
    Depois incluir -> save-exact=true

9: Instalação da biblioteca para trabalharmos com variáveis de ambiente
    npm i dotenv

10: Instalação da biblioteca zod para validação dos dados
    npm i zod

11: Instalação e Configuração do eslint
    npm i eslint @rocketseat/eslint-config -D

12: Criando aliases de importação no arquivo tsconfig
     "baseUrl": "./",
     "paths": {
       "@/*": ["./src/*"]
     },

13: Instalação e configuração do prisma orm de banco de dados
    npm i prisma -D
    npx prisma -h - Lista os comandos do prisma
    npx prisma init - Após a instalação podemos definir nossa primeira model
    npx prisma generate - Cria a tipagem do typescript por baixo dos panos
    npm i @prisma/client - Dependência de produção do prisma para acessar o banco de dados
    npx prisma migrate dev - Executa um schema que ainda não foi executado e cria sua migration


14: Criação do docker-compose para subir o banco de dados postgres
    Na raiz do projeto devemos criar um arquivo chamado docker-compose.yml e colocar a informações abaixo
        version: '3'

        services:
          api-solid-pg:
            image: bitnami/postgresql
            ports:
              - "5432:5432"
            environment:
              - POSTGRESQL_USERNAME=docker
              - POSTGRESQL_PASSWORD=docker
              - POSTGRESQL_DATABASE=apisolid


    docker compose up -d   -> Executa o docker compose
    docker compose stop    -> Para o container sem deletar
    docker compose down    -> Deleta todos os containers

15: Instalação da biblioteca mais utilizada com node para fazer hash de senhas
    npm install bcryptjs
    npm install @types/bcryptjs -D


16: SOLID - 5 principals

    // D - Dependency Inversion Principle



17: Configurando o VITEST
    npm i vitest vite-tsconfig-paths -D

    1.1 - Após a instalação devemos criar um arquivo na raiz chamado vite.config.ts e incluir a config abaixo
        import { defineConfig } from 'vitest/config';
        import tsConfigPaths from 'vite-tsconfig-paths';
        export default defineConfig({
            plugins: [tsConfigPaths()]
        });

    1.2 - Agora em nosso package.json devemos criar o script abaixo
        "test": "vitest run",
        "test:watch": "vitest",

